import { betterAuth } from "better-auth"
import { drizzleAdapter } from "better-auth/adapters/drizzle"
import { nextCookies } from "better-auth/next-js"
import { admin, organization } from "better-auth/plugins"

import { db } from "@this/db"
import env from "@this/env/auth"
import { APP_ID, APP_NAME } from "@this/utils/constants"

import { sendInvitationEmail } from "./emails"
import { accessControl, adminRole, memberRole, ownerRole } from "./permissions"

export const auth = betterAuth({
  appName: APP_NAME,
  basePath: env.BETTER_AUTH_BASE_PATH,
  baseURL: env.BETTER_AUTH_URL,
  secret: env.BETTER_AUTH_SECRET,
  database: drizzleAdapter(db, {
    provider: "sqlite",
    usePlural: true,
  }),
  emailAndPassword: {
    enabled: true,
    autoSignIn: true,
  },
  socialProviders: {
    google: {
      clientId: env.GOOGLE_CLIENT_ID,
      clientSecret: env.GOOGLE_CLIENT_SECRET,
    },
    github: {
      clientId: env.GITHUB_CLIENT_ID,
      clientSecret: env.GITHUB_CLIENT_SECRET,
    },
  },
  advanced: {
    // We rely on ids generated by the database
    generateId: false,
    cookiePrefix: APP_ID,
  },
  session: {
    expiresIn: 60 * 60 * 24 * 30, // 30 days
    updateAge: 60 * 60 * 24 * 15, // 15 days
  },
  trustedOrigins: env.BETTER_AUTH_TRUSTED_ORIGINS,
  plugins: [
    admin(),
    organization({
      ac: accessControl,
      roles: {
        member: memberRole,
        admin: adminRole,
        owner: ownerRole,
      },
      invitationExpiresIn: 60 * 60 * 24 * 7, // 7 days
      sendInvitationEmail,
    }),
    // Make sure this is the last plugin included
    ...(env.BETTER_AUTH_SERVER_ACTIONS ? [nextCookies()] : []),
  ],
})

export type Auth = typeof auth
export type Session = typeof auth.$Infer.Session

export { BetterAuthError } from "better-auth"
